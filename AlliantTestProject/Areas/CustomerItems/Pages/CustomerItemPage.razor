@page "/customeritem/{customerid:int}"
@page "/customeritem/{customerid:int}/{customeritemid:int}"

@using AlliantTestProject.Data.Models
@using AlliantTestProject.Data.Services
@inject CustomerItemsService CustomerItemsService
@inject CustomerService CustomerService
@inject ItemsService ItemsService

@if (CustomerItemId == null)
{
    <h1>Create a new Customer Item</h1>
}
else
{
    <h1>Edit Customer Item</h1>
}

<EditForm Model=customerItem OnValidSubmit="OnSave">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (isError)
    {
        <ul class="validation-errors">
            <li class="validation-message">@errorMsg</li>
        </ul>
    }
    <p>Customer Number: @customer.CustomerNumber</p>
    <p>Customer Name: @customer.CustomerName</p>
    <div class="form-row">
        <div class="form-group col-sm-2">
            <label for="itemId">Item</label>
            <select id="itemId" @bind="customerItem.ItemId">
                <option>Select an Item</option>
                @foreach (var item in items)
                {
                    <option value="@item.ItemId">@item.ItemNumber - @item.Description</option>
                }
            </select>
        </div>
        <div class="form-group col-sm-4">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" class="form-control" placeholder="0" @bind-Value="customerItem.Quantity" />
        </div>
    </div>
    <div class="form-group col-sm-4">
        <label for="price">Price</label>
        <InputNumber id="price" class="form-control" placeholder="0.00" @bind-Value="customerItem.Price" />
    </div>
    <div class="form-group col-sm-4">
        <div class="form-check">
            <InputCheckbox id="isActive" class="form-check-input" type="checkbox" @bind-Value="customerItem.IsActive" />
            <label class="form-check-label" for="isActive">
                Active
            </label>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (CustomerItemId != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteCustomerItem">Delete Customer</button>
    }
</EditForm>

@code {
    [Parameter] public int? CustomerItemId { get; set; }
    [Parameter] public int CustomerId { get; set; }

    private CustomerItem customerItem = new CustomerItem();
    private List<Item> items = new List<Item>();
    private Customer customer = new Customer();

    private string btnText = string.Empty;

    private bool isError = false;
    private string errorMsg = string.Empty;

    protected override void OnInitialized()
    {
        btnText = CustomerItemId == null ? "Save New Customer Item" : "Update Customer Item";
    }

    protected override async Task OnInitializedAsync()
    {
        if (CustomerItemId != null)
        {
            customerItem = await CustomerItemsService.GetCustomerItem((int)CustomerItemId);
            customer = customerItem.Customer;
        }
        else
        {
            customer = await CustomerService.GetCustomer(CustomerId);
            customerItem.CustomerId = customer.CustomerId;
        }

        items = await ItemsService.GetAllItems();
    }

    async Task OnSave()
    {
        isError = false;
        if (CustomerItemId == null)
        {
            try
            {
                await CustomerItemsService.CreateCustomerItem(customerItem);
            }
            catch (Exception ex)
            {
                isError = true;
                // if (ex.Message.Contains("Cannot insert duplicate key row in object") && ex.Message.Contains("CustomerNumber"))
                // {
                //     errorMsg = $"The Customer Number ({customer.CustomerNumber}) is already in use";
                // }
                errorMsg = "An unexpected error ocurred";
            }
        }
        else
        {
            try
            {
                await CustomerItemsService.UpdateCustomerItem(customerItem.CustomerItemId, customerItem);
            }
            catch (Exception ex)
            {
                isError = true;
                // if (ex.Message.Contains("Cannot insert duplicate key row in object") && ex.Message.Contains("CustomerNumber"))
                // {
                //     errorMsg = $"The Customer Number ({customer.CustomerNumber}) is already in use";
                // }
                errorMsg = "An unexpected error ocurred";
            }
        }
    }

    async Task DeleteCustomerItem()
    {
        await CustomerItemsService.DeleteCustomerItem(customerItem.CustomerItemId);
    }
}
